//
//  PostPreviewViewController.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/22/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol PostPreviewDisplayLogic: class {
  func displaySomething(viewModel: PostPreview.Something.ViewModel)
}

class PostPreviewViewController: UIViewController, PostPreviewDisplayLogic {
  var interactor: PostPreviewBusinessLogic?
  var router: (NSObjectProtocol & PostPreviewRoutingLogic & PostPreviewDataPassing)?
  
  let postID: Int
  
  override var prefersStatusBarHidden: Bool {
    return true
  }
  
  private lazy var webView: WKWebView = {
    let webConfiguration = WKWebViewConfiguration()
    let webView = WKWebView(frame: .zero, configuration: webConfiguration)
    webView.translatesAutoresizingMaskIntoConstraints = false
    return webView
  }()

  // MARK: Object lifecycle
  
  init(postID: Int) {
    self.postID = postID
    super.init(nibName: nil, bundle: nil)
    setup()
  }
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    self.postID = -1
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    self.postID = -1
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = PostPreviewInteractor()
    let presenter = PostPreviewPresenter()
    let router = PostPreviewRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    navigationController?.interactivePopGestureRecognizer?.delegate = self
    setupViews()
    setupConstraints()
    fetchPost()
  }
  
  private func setupViews() {
    view.addSubview(webView)
  }
  
  private func setupConstraints() {
    let webViewC = [
      webView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      webView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
      webView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
      webView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
    ]
    
    NSLayoutConstraint.activate(webViewC)
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchPost() {
    let request = PostPreview.Something.Request(postID: postID)
    interactor?.fetchPost(request: request)
  }
  
  func displaySomething(viewModel: PostPreview.Something.ViewModel) {
    webView.loadHTMLString(viewModel.html, baseURL: nil)
  }
}

extension PostPreviewViewController: UIGestureRecognizerDelegate {}
