//
//  AddToWatchlistInteractor.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 2/12/19.
//  Copyright (c) 2019 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddToWatchlistBusinessLogic {
  func doSomething(request: AddToWatchlist.Something.Request)
  func addToWatchlist(id: AddToWatchlist.Add.Request)
}

protocol AddToWatchlistDataStore {
  //var name: String { get set }
}

class AddToWatchlistInteractor: AddToWatchlistBusinessLogic, AddToWatchlistDataStore {
  var presenter: AddToWatchlistPresentationLogic?
  var worker: AddToWatchlistWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: AddToWatchlist.Something.Request) {
    worker = AddToWatchlistWorker()
    worker?.fetchCurrencies { currencies in
      self.worker?.fetchSavedWatchlist { savedCurrencies in
        
        if currencies == nil && savedCurrencies == nil {
          self.presenter?.presentEmptyList()
        } else {
          var list = [AddToWatchlist.Coin]()
          if let currs = currencies?.data.coins {
            if let saved = savedCurrencies {
              for curr in currs {
                list.append(AddToWatchlist.Coin(id: curr.id, isWatchlist: saved.filter { $0.id == curr.id }.first?.isWatchlist ?? false,
                                                          name: curr.name,
                                                          symbol: curr.symbol,
                                                          icon: curr.iconType,
                                                          iconUrl: curr.iconUrlEncoded))
              }
            } else {
              for curr in currs {
                list.append(AddToWatchlist.Coin(id: curr.id, isWatchlist: false, name: curr.name, symbol: curr.symbol, icon: curr.iconType, iconUrl: curr.iconUrl))
              }
            }
          }
          let response = AddToWatchlist.Something.Response(coins: list)
          self.presenter?.presentSomething(response: response)
        }
      }
    }
  }
  
  func addToWatchlist(id: AddToWatchlist.Add.Request) {
    worker = AddToWatchlistWorker()
    worker?.addToWatchlist(id) { response in
      self.presenter?.addToWatchlist(response: response)
    }
  }
}
