//
//  AddToWatchlistWorker.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 2/12/19.
//  Copyright (c) 2019 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class AddToWatchlistWorker {
  func fetchCurrencies(_ completion: @escaping(CRRoot<CRDataList>?) -> Void) {
    DispatchQueue.global(qos: .background).async {
      let coinsNetworkManager = CurrenciesNetworkManager()
      coinsNetworkManager.getCurrencies(limit: 100, offset: 0, ids: nil, completion: { currencies, error in
        DispatchQueue.main.async {
          if error != nil {
            print(error!)
          }
          
          guard let curs = currencies else {
            return
          }
          DispatchQueue.main.async {
            completion(curs)
          }
        }
      })
    }
  }
  
  func fetchSavedWatchlist(_ completion: @escaping([SaveCurrency]?) -> Void) {
    DispatchQueue.global(qos: .background).async {
      let savedCurrency = DataStore.shared.loadWatchlist()
      DispatchQueue.main.async {
        completion(savedCurrency)
      }
    }
  }
  
  func addToWatchlist(_ input: AddToWatchlist.Add.Request,_ completion: @escaping(AddToWatchlist.Add.Response) -> Void) {
    let resultIsWatchlist = !input.isWatchlist
    DataStore.shared.setWatchlist(id: input.id, isWatchlist: resultIsWatchlist)
    completion(AddToWatchlist.Add.Response(position: input.position, isWatchlist: resultIsWatchlist))
  }
}
