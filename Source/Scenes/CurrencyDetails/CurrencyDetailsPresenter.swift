//
//  CurrencyDetailsPresenter.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDetailsPresentationLogic {
  func presentCoinDetails(response: CurrencyDetails.Something.Response)
  func favorites(response: CurrencyDetails.AddFavorite.Response)
  func presentWebsite()
  func presentError(_ error: CTError)
}

class CurrencyDetailsPresenter: CurrencyDetailsPresentationLogic {
  typealias CurrencyInfo = CurrencyDetails.Something.ViewModel.Info
  
  weak var viewController: CurrencyDetailsDisplayLogic?
  var coinSite: URL?
  
  // MARK: Do something
  
  func presentCoinDetails(response: CurrencyDetails.Something.Response) {
    let currInfo = [CurrencyInfo(name: "Price:",
                                 value: response.coin.price?.long,
                                 valueColor: nil),
                    CurrencyInfo(name: "% Change:",
                                 value: response.coin.changeStr,
                                 valueColor: response.coin.changeColor),
                    CurrencyInfo(name: "Market Cap:",
                                 value: response.coin.marketCap?.long,
                                 valueColor: nil),
                    CurrencyInfo(name: "Volume 24h:",
                                 value: response.coin.volume?.long,
                                 valueColor: nil),
                    CurrencyInfo(name: "Available supply:",
                                 value: response.coin.circulatingSupply?.long,
                                 valueColor: nil),
                    CurrencyInfo(name: "Total supply:",
                                 value: response.coin.totalSupply?.long,
                                 valueColor: nil)]

    let viewModel = CurrencyDetails.Something.ViewModel(iconType: response.coin.iconType,
                                                        iconUrl: response.coin.iconUrl,
                                                        title: "\(response.coin.name) \(response.coin.symbol)",
                                                        saveCurrency: response.coin,
                                                        info: currInfo)
    viewController?.displaySomething(viewModel: viewModel)
    coinSite = response.coin.websiteUrl
  }
  
  func favorites(response: CurrencyDetails.AddFavorite.Response) {
    viewController?.changeFavorites(viewModel: CurrencyDetails.AddFavorite
      .ViewModel(coin: response.coin))
  }
  
  func presentWebsite() {
    if coinSite != nil {
      viewController?.openCoinWebsite(site: coinSite!)
    } else {
      viewController?.openNoCoinWebsite()
    }
  }
  
  func presentError(_ error: CTError) {
    viewController?.displayError(error.rawValue)
  }
}
