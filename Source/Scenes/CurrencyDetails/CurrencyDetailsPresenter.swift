//
//  CurrencyDetailsPresenter.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDetailsPresentationLogic {
  func presentSomething(response: CurrencyDetails.Something.Response)
  func favorites(response: CurrencyDetails.AddFavorite.Response)
  func presentWebsite()
}

class CurrencyDetailsPresenter: CurrencyDetailsPresentationLogic {
  weak var viewController: CurrencyDetailsDisplayLogic?
  var coinSite: String?
  
  // MARK: Do something
  
  func presentSomething(response: CurrencyDetails.Something.Response) {
    var currInfo = [CurrencyDetails.Something.ViewModel.Info]()
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Price:",
                                                             value: response.curr.priceStrLong, valueColor: nil))
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Market Cap:",
                                                             value: response.curr.marketCapStrLong, valueColor: nil))
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Volume 24h:",
                                                             value: response.curr.volumeStrLong, valueColor: nil))
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Available supply:",
                                                             value: response.curr.circulatingSupplyStrLong, valueColor: nil))
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Total supply:",
                                                             value: response.curr.totalSupplyStrLong, valueColor: nil))
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "% Change:",
                                                             value: response.curr.changeStr, valueColor: response.curr.changeColor))

    let viewModel = CurrencyDetails.Something.ViewModel(title: "\(response.curr.name) \(response.curr.symbol)",
                                                        saveCurrency: response.saveCurr,
                                                        info: currInfo)
    viewController?.displaySomething(viewModel: viewModel)
    
    coinSite = response.curr.websiteUrl
  }
  
  func favorites(response: CurrencyDetails.AddFavorite.Response) {
    viewController?.changeFavorites(viewModel: CurrencyDetails.AddFavorite
      .ViewModel(saveCurrency: response.saveCurrency))
  }
  
  func presentWebsite() {
    if coinSite != nil {
      viewController?.openCoinWebsite(site: coinSite!)
    } else {
      viewController?.openNoCoinWebsite()
    }
  }
}
