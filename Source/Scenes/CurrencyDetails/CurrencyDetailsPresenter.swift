//
//  CurrencyDetailsPresenter.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDetailsPresentationLogic {
  func presentSomething(response: CurrencyDetails.Something.Response)
  func favorites(response: CurrencyDetails.AddFavorite.Response)
}

class CurrencyDetailsPresenter: CurrencyDetailsPresentationLogic {
  weak var viewController: CurrencyDetailsDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: CurrencyDetails.Something.Response) {
    var currInfo = [CurrencyDetails.Something.ViewModel.Info]()
    
    var priceValue = "null"
    if let price = response.curr.priceValue {
      priceValue = CurrencyConverter.convertLong(price)
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Price:",
                                                             value: priceValue))
    
    var marketCapValue = "null"
    if let marketCap = response.curr.marketCap {
      marketCapValue = CurrencyConverter.convertLong(marketCap)
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Market Cap:",
                                                             value: marketCapValue))
    
    var volumeValue = "null"
    if let volume = response.curr.volume {
      volumeValue = CurrencyConverter.convertLong(volume)
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Volume 24h:",
                                                             value: volumeValue))
    
    var circulatingSupplyValue = "null"
    if let circulatingSupply = response.curr.circulatingSupply {
      circulatingSupplyValue = CurrencyConverter.convertLong(circulatingSupply)
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Available supply:",
                                                             value: circulatingSupplyValue))
    
    var totalSupplyValue = "null"
    if let totalSupply = response.curr.totalSupply {
      totalSupplyValue = CurrencyConverter.convertLong(totalSupply)
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "Total supply:",
                                                             value: totalSupplyValue))
    
    var changeValue = "null"
    if let change = response.curr.change {
      changeValue = "\(change)"
    }
    currInfo.append(CurrencyDetails.Something.ViewModel.Info(name: "% Change:", value: changeValue))

    let viewModel = CurrencyDetails.Something.ViewModel(title: "\(response.curr.name) \(response.curr.symbol)",
                                                        saveCurrency: response.saveCurr,
                                                        info: currInfo)
    viewController?.displaySomething(viewModel: viewModel)
  }
  
  func favorites(response: CurrencyDetails.AddFavorite.Response) {
    viewController?.changeFavorites(viewModel: CurrencyDetails.AddFavorite
      .ViewModel(saveCurrency: response.saveCurrency))
  }
}
