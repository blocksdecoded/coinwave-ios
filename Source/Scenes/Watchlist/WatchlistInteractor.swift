//
//  WatchlistInteractor.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WatchlistBusinessLogic {
  func doSomething(request: Watchlist.Something.Request)
  func fetchFavorite()
}

protocol WatchlistDataStore {
  //var name: String { get set }
}

class WatchlistInteractor: WatchlistBusinessLogic, WatchlistDataStore {
  var presenter: WatchlistPresentationLogic?
  var worker: WatchlistWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: Watchlist.Something.Request) {
    guard let ids = worker?.fetchWatchlistIds(),
          ids.count > 0 else {
            print("no ids")
      //TODO: present empty list
      return
    }
    
    let strIds = ids.map { String($0) }.joined(separator: ",")
    
    worker?.fetchCurrencies(ids: strIds, { currencies in
      let response = Watchlist.Something.Response(currencies: currencies.data.coins)
      self.presenter?.presentSomething(response: response)
    })
  }
  
  func fetchFavorite() {
    guard let coin = worker?.fetchFavorite() else {
      presenter?.presentNoFavorite()
      return
    }
    
    presenter?.presentFavorite(response: Watchlist.Favorite.Response(id: Int(coin.id), symbol: coin.symbol))
  }
}
