//
//  WatchlistInteractor.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WatchlistBusinessLogic {
  func doSomething(request: Watchlist.Something.Request)
  func updateLocalWatchlist()
}

protocol WatchlistDataStore {
  //var name: String { get set }
}

class WatchlistInteractor: WatchlistBusinessLogic, WatchlistDataStore {
  var presenter: WatchlistPresentationLogic?
  var worker: WatchlistWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: Watchlist.Something.Request) {
    worker = WatchlistWorker()
    
    if let localCurrencies = worker?.fetchLocalCurrencies() {
      let response = Watchlist.Something.Response(currencies: filterCurrencies(localCurrencies))
      self.presenter?.presentSomething(response: response)
    }
    
    worker?.fetchCurrencies({ currencies in
      let response = Watchlist.Something.Response(currencies: self.filterCurrencies(currencies.data.coins))
      self.presenter?.presentSomething(response: response)
    })
  }
  
  private func filterCurrencies(_ currencies: [CRCoin]) -> [CRCoin] {
    var watchlist = [CRCoin]()
    if let saveCurrencies = worker?.fetchSaveCurrencies() {
      for sCurr in saveCurrencies where sCurr.isWatchlist {
        watchlist.append(contentsOf: currencies.filter { $0.id == sCurr.id })
      }
    }
    return watchlist
  }
  
  func updateLocalWatchlist() {
    worker = WatchlistWorker()
    
    if let localCurrencies = worker?.fetchLocalCurrencies() {
      let response = Watchlist.Something.Response(currencies: filterCurrencies(localCurrencies))
      self.presenter?.presentSomething(response: response)
    }
  }
}
