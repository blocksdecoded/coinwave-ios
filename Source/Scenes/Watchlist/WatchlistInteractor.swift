//
//  WatchlistInteractor.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WatchlistBusinessLogic {
  func doSomething(request: Watchlist.Something.Request)
  func fetchFavorite()
}

protocol WatchlistDataStore {
  //var name: String { get set }
}

class WatchlistInteractor: WatchlistBusinessLogic, WatchlistDataStore {
  var presenter: WatchlistPresentationLogic?
  var worker: CoinsWorker?
  
  func doSomething(request: Watchlist.Something.Request) {
    worker?.fetchWatchlist(request.field, request.type) { coins, error in
      if error != nil {
        self.presenter?.presentError(error!)
      } else {
        if coins != nil {
          if coins!.isEmpty {
            self.presenter?.presentError(.emptyWatchlist)
          } else {
            let response = Watchlist.Something.Response(currencies: coins!)
            self.presenter?.presentSomething(response: response)
          }
        } else {
          self.presenter?.presentError(.noData)
        }
      }
    }
  }
  
  func fetchFavorite() {
    worker?.fetchFavorite { coin, error in
      if error != nil {
        switch error! {
        case .network:
          self.presenter?.presentError(error!)
        case .noData:
          self.presenter?.presentNoFavorite()
        default:
          break
        }
      } else {
        if coin == nil {
          self.presenter?.presentNoFavorite()
        } else {
          self.presenter?.presentFavorite(response: Watchlist.Favorite.Response(id: Int(coin!.id), symbol: coin!.symbol))
        }
      }
    }
  }
}
