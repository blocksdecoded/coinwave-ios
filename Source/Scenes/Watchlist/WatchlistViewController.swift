//
//  WatchlistViewController.swift
//  Cryptotracker
//
//  Created by Abai Abakirov on 11/24/18.
//  Copyright (c) 2018 makeuseof. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol WatchlistDisplayLogic: class {
  func displaySomething(viewModel: Watchlist.Something.ViewModel)
  func displayFavorite(viewModel: Watchlist.Favorite.ViewModel)
  func displayNoFavorite()
  func displayNoWatchlist(_ string: String)
  func displayError(_ string: String)
  func setSort(_ field: CRCoin.OrderField, _ type: CRCoin.OrderType)
}

class WatchlistViewController: UIViewController, WatchlistDisplayLogic {
  override var preferredStatusBarStyle: UIStatusBarStyle {
    return .default
  }
  
  weak var sideMenuDelegate: SideMenuDelegate?
  
  private var isEmptyWatchlist = false
  
  private var screenName: String {
    return "\(WatchlistViewController.self)"
  }
  
  var interactor: WatchlistBusinessLogic?
  var router: (NSObjectProtocol & WatchlistRoutingLogic & WatchlistDataPassing)?
  
  private lazy var nameColumn: UIButton = {
    return columnTitle(text: "Name")
  }()
  
  private lazy var marketCapColumn: UIButton = {
    return columnTitle(text: "Market Cap")
  }()
  
  private lazy var volumeColumn: UIButton = {
    return columnTitle(text: "Volume (24h)")
  }()
  
  private lazy var priceColumn: UIButton = {
    return columnTitle(text: "Price (24h)")
  }()
  
  private lazy var titles: [UIButton] = {
    return [nameColumn, marketCapColumn, volumeColumn, priceColumn]
  }()
  
  private lazy var loadingView: NVActivityIndicatorView = {
    let view = NVActivityIndicatorView(frame: CGRect.zero, type: .circleStrokeSpin, color: .white, padding: nil)
    view.translatesAutoresizingMaskIntoConstraints = false
    return view
  }()
  
  private lazy var errorView: ErrorView = {
    let errorView = ErrorView(frame: CGRect.zero)
    errorView.delegate = self
    errorView.translatesAutoresizingMaskIntoConstraints = false
    return errorView
  }()
  
  private lazy var topCircle: UIImageView = {
    let imageView = UIImageView()
    imageView.translatesAutoresizingMaskIntoConstraints = false
    imageView.image = UIImage(named: "top_circle_white")
    imageView.contentMode = .scaleToFill
    return imageView
  }()
  
  private lazy var navigationView: UIView = {
    let view = UIView()
    view.translatesAutoresizingMaskIntoConstraints = false
    return view
  }()
  
  private lazy var titleLbl: UILabel = {
    let titleLabel = UILabel()
    titleLabel.translatesAutoresizingMaskIntoConstraints = false
    titleLabel.text = "Watchlist"
    titleLabel.textColor = UIColor(red: 40.0/255.0, green: 51.0/255.0, blue: 59.0/255.0, alpha: 0.7)
    titleLabel.font = UIFont(name: Constants.Fonts.regular, size: 24)
    return titleLabel
  }()
  
  private lazy var menuBtn: BDHamburger = {
    let button = BDHamburger.instance()
    button.addTarget(self, action: #selector(menuClicked), for: .touchUpInside)
    return button
  }()
  
  private lazy var chart: CurrencyChart = {
    let chart = CurrencyChart(version: .favorite)
    chart.translatesAutoresizingMaskIntoConstraints = false
    chart.delegate = self
    return chart
  }()
  
  private lazy var headerForCurrenciesList: UIView = {
    let headerView = UIView()
    headerView.translatesAutoresizingMaskIntoConstraints = false
    let stackView = UIStackView(arrangedSubviews: titles)
    stackView.translatesAutoresizingMaskIntoConstraints = false
    stackView.axis = .horizontal
    stackView.alignment = .fill
    stackView.distribution = .fillEqually
    
    headerView.addSubview(stackView)
    
    NSLayoutConstraint.activate([
      stackView.leadingAnchor.constraint(equalTo: headerView.leadingAnchor),
      stackView.trailingAnchor.constraint(equalTo: headerView.trailingAnchor),
      stackView.centerYAnchor.constraint(equalTo: headerView.centerYAnchor)
      ])
    
    return headerView
  }()
  
  private func columnTitle(text: String) -> UIButton {
    let button = UIButton()
    button.setTitle(text, for: .normal)
    button.titleLabel?.textAlignment = .center
    button.setTitleColor(UIColor.white.withAlphaComponent(0.7), for: .normal)
    button.tintColor = UIColor.white.withAlphaComponent(0.7)
    button.titleLabel?.font = UIFont(name: Constants.Fonts.light, size: 11)
    button.addTarget(self, action: #selector(sortCoins(_:)), for: .touchUpInside)
    button.setImage(UIImage(named: "triangle_up")?.withRenderingMode(.alwaysTemplate), for: .normal)
    button.semanticContentAttribute = .forceRightToLeft
    button.imageEdgeInsets = UIEdgeInsets(top: 0.5, left: 2.5, bottom: -0.5, right: -2.5)
    button.titleEdgeInsets = UIEdgeInsets(top: 0, left: -2.5, bottom: 0, right: 2.5)
    return button
  }
  
  private lazy var refreshControl: UIRefreshControl = {
    let refresh = UIRefreshControl()
    refresh.addTarget(self, action: #selector(refreshTable), for: .valueChanged)
    return refresh
  }()
  
  private lazy var watchTable: UITableView = {
    let table = UITableView()
    table.translatesAutoresizingMaskIntoConstraints = false
    table.backgroundColor = .clear
    table.rowHeight = 60
    table.delegate = self
    table.dataSource = self
    table.refreshControl = refreshControl
    table.register(TVCCrypto.create(), forCellReuseIdentifier: TVCCrypto.reuseID)
    table.separatorStyle = .none
    return table
  }()
  
  private var currencies: [CRCoin]?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = WatchlistInteractor()
    let presenter = WatchlistPresenter()
    let router = WatchlistRouter()
    let worker = CoinsWorker()
    let sortWorker = SortingWorker()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    interactor.worker = worker
    interactor.sortingWorker = sortWorker
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    doSomething()
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    print(screenName)
    setupViews()
    setupConstraints()
    doSomething()
    loadFavorite()
    interactor?.viewDidLoad(screenName)
  }
  
  private func setupViews() {
    let factory = WidgetFactory()
    factory.setGradientTo(view: view)
    view.addSubview(topCircle)
    navigationView.addSubview(titleLbl)
    navigationView.addSubview(menuBtn)
    view.addSubview(navigationView)
    view.addSubview(chart)
    view.addSubview(headerForCurrenciesList)
    view.addSubview(watchTable)
    view.addSubview(loadingView)
    view.addSubview(errorView)
  }
  
  private func setupConstraints() {
    let topCircleC = [
      topCircle.leadingAnchor.constraint(equalTo: view.leadingAnchor),
      topCircle.topAnchor.constraint(equalTo: view.topAnchor),
      view.trailingAnchor.constraint(equalTo: topCircle.trailingAnchor),
      topCircle.heightAnchor.constraint(equalToConstant: 250)
    ]
    
    let navigationViewC = [
      navigationView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      navigationView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
      navigationView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
      navigationView.heightAnchor.constraint(equalToConstant: 100)
    ]
    
    let chartC = [
      chart.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20),
      view.safeAreaLayoutGuide.trailingAnchor.constraint(equalTo: chart.trailingAnchor, constant: 20),
      chart.topAnchor.constraint(equalTo: navigationView.bottomAnchor),
      chart.heightAnchor.constraint(equalToConstant: 200)
    ]
    
    let headerForCurrenciesListC = [
      headerForCurrenciesList.topAnchor.constraint(equalTo: chart.bottomAnchor),
      headerForCurrenciesList.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      view.safeAreaLayoutGuide.trailingAnchor.constraint(equalTo: headerForCurrenciesList.trailingAnchor),
      headerForCurrenciesList.heightAnchor.constraint(equalToConstant: 50)
    ]
    
    let watchTableC = [
      watchTable.topAnchor.constraint(equalTo: headerForCurrenciesList.bottomAnchor),
      watchTable.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      view.safeAreaLayoutGuide.trailingAnchor.constraint(equalTo: watchTable.trailingAnchor),
      view.safeAreaLayoutGuide.bottomAnchor.constraint(equalTo: watchTable.bottomAnchor)
    ]
    
    let menuBtnC = [
      menuBtn.leadingAnchor.constraint(equalTo: navigationView.leadingAnchor),
      menuBtn.centerYAnchor.constraint(equalTo: navigationView.centerYAnchor),
      menuBtn.widthAnchor.constraint(equalToConstant: 25),
      menuBtn.heightAnchor.constraint(equalToConstant: 25)
    ]
    
    let titleLblC = [
      titleLbl.leadingAnchor.constraint(equalTo: menuBtn.trailingAnchor, constant: 16),
      titleLbl.centerYAnchor.constraint(equalTo: navigationView.centerYAnchor)
    ]
    
    let errorViewC = [
      errorView.centerXAnchor.constraint(equalTo: watchTable.centerXAnchor),
      errorView.centerYAnchor.constraint(equalTo: watchTable.centerYAnchor, constant: -104)
    ]
    
    let loadingViewC = [
      loadingView.centerXAnchor.constraint(equalTo: watchTable.centerXAnchor),
      loadingView.centerYAnchor.constraint(equalTo: watchTable.centerYAnchor),
      loadingView.widthAnchor.constraint(equalToConstant: 50),
      loadingView.heightAnchor.constraint(equalToConstant: 50)
    ]
    
    NSLayoutConstraint.activate(
      chartC +
      navigationViewC +
      headerForCurrenciesListC +
      watchTableC +
      menuBtnC +
      titleLblC +
      topCircleC +
      loadingViewC +
      errorViewC)
  }
  
  private func openDetails(_ index: Int) {
    guard let curr = currencies?[index] else {
      return
    }
    router?.openDetails(currencyID: curr.identifier, currencySymbol: curr.symbol)
  }
  
  func doSomething() {
    errorView.isHidden = true
    loadingView.isHidden = false
    loadingView.startAnimating()
    watchTable.isHidden = true
    headerForCurrenciesList.isHidden = true
    let request = Watchlist.Something.Request(field: .name, type: .asc, force: false)
    interactor?.fetchCoins(request: request)
  }
  
  func loadFavorite() {
    interactor?.fetchFavorite(force: false)
  }
  
  func displaySomething(viewModel: Watchlist.Something.ViewModel) {
    refreshControl.endRefreshing()
    errorView.isHidden = true
    loadingView.stopAnimating()
    loadingView.isHidden = true
    watchTable.isHidden = false
    headerForCurrenciesList.isHidden = false
    currencies = viewModel.currencies
    watchTable.reloadData()
  }
  
  func displayFavorite(viewModel: Watchlist.Favorite.ViewModel) {
    chart.load(coinID: viewModel.identifier, coinSymbol: viewModel.symbol, time: .hour24)
  }
  
  func displayNoFavorite() {
    chart.noCoin()
  }
  
  func displayNoWatchlist(_ string: String) {
    isEmptyWatchlist = true
    refreshControl.endRefreshing()
    errorView.isHidden = false
    errorView.setText(string, hideWarning: true, buttonText: "ADD COIN")
    loadingView.stopAnimating()
    loadingView.isHidden = true
    watchTable.isHidden = true
    headerForCurrenciesList.isHidden = true
  }
  
  func displayError(_ string: String) {
    errorView.isHidden = false
    errorView.setText(string, hideWarning: true)
    loadingView.stopAnimating()
    loadingView.isHidden = true
    watchTable.isHidden = true
    headerForCurrenciesList.isHidden = true
    chart.showError()
  }
  
  func setSort(_ field: CRCoin.OrderField, _ type: CRCoin.OrderType) {
    var button: UIButton
    var others: [UIButton]
    
    switch field {
    case .name:
      button = nameColumn
      others = titles.filter { $0 != nameColumn }
    case .price:
      button = priceColumn
      others = titles.filter { $0 != priceColumn }
    case .volume:
      button = volumeColumn
      others = titles.filter { $0 != volumeColumn }
    case .marketCap:
      button = marketCapColumn
      others = titles.filter { $0 != marketCapColumn }
    }
    
    button.tintColor = UIColor(red: 0.23, green: 0.58, blue: 1, alpha: 1)
    button.setTitleColor(UIColor(red: 0.23, green: 0.58, blue: 1, alpha: 1), for: .normal)
    
    var image: UIImage?
    switch type {
    case .asc:
      image = UIImage(named: "triangle_up")?.withRenderingMode(.alwaysTemplate)
    case .desc:
      image = UIImage(named: "triangle_down")?.withRenderingMode(.alwaysTemplate)
    }
    
    button.setImage(image, for: .normal)
    defaultButton(others)
  }
  
  private func defaultButton(_ buttons: [UIButton]) {
    for button in buttons {
      button.tintColor = UIColor.white.withAlphaComponent(0.7)
      button.setTitleColor(UIColor.white.withAlphaComponent(0.7), for: .normal)
    }
  }
  
  @objc private func sortCoins(_ sender: UIButton) {
    switch sender {
    case nameColumn:
      interactor?.sortName(screenName)
    case marketCapColumn:
      interactor?.sortMarketCap(screenName)
    case volumeColumn:
      interactor?.sortVolume(screenName)
    case priceColumn:
      interactor?.sortPrice(screenName)
    default:
      break
    }
  }
  
  @objc private func menuClicked() {
    sideMenuDelegate?.openMenu()
  }
  
  @objc private func refreshTable() {
    interactor?.fetchCoins(request: Watchlist.Something.Request(field: .name, type: .asc, force: true))
    interactor?.fetchFavorite(force: true)
  }
}

extension WatchlistViewController: UITableViewDelegate, UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return currencies?.count ?? 0
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: TVCCrypto.reuseID) as? TVCCrypto else {
      fatalError("\(TVCCrypto.self) not registered")
    }
    
    guard let currency = currencies?[indexPath.row] else {
      fatalError("No currency for \(indexPath.row)")
    }
    
    cell.onBind(currency, isTop: indexPath.row == 0)
    
    return cell
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    openDetails(indexPath.row)
  }
}

extension WatchlistViewController: CurrencyChartDelegate {
  func onChooseFavorite() {
    let favorites = CurrenciesViewController(version: .favorite)
    favorites.favoritePickerDelegate = self
    self.navigationController?.pushViewController(favorites, animated: true)
  }
}

extension WatchlistViewController: OnPickFavoriteDelegate {
  func onPickedFavorite() {
    interactor?.fetchFavorite(force: false)
  }
}

extension WatchlistViewController: ErrorViewDelegate {
  func onRetry() {
    if isEmptyWatchlist {
      isEmptyWatchlist = false
      let addToWatchlist = AddToWatchlistViewController()
      self.navigationController?.pushViewController(addToWatchlist, animated: true)
    } else {
      interactor?.fetchCoins(request: Watchlist.Something.Request(field: .name, type: .asc, force: true))
      interactor?.fetchFavorite(force: true)
    }
  }
}
